{"version":3,"sources":["../../../src/@ionic-native/core/decorators.ts"],"names":[],"mappings":"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","file":"decorators.js","sourceRoot":"","sourcesContent":["import { instanceAvailability, checkAvailability, wrap, wrapInstance, overrideFunction } from './plugin';\r\nimport { getPlugin, getPromise } from './util';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/observable/throw';\r\n\r\nexport interface PluginConfig {\r\n  /**\r\n   * Plugin name, this should match the class name\r\n   */\r\n  pluginName: string;\r\n  /**\r\n   * Plugin NPM package name\r\n   */\r\n  plugin: string;\r\n  /**\r\n   * Plugin object reference\r\n   */\r\n  pluginRef?: string;\r\n  /**\r\n   * Github repository URL\r\n   */\r\n  repo?: string;\r\n  /**\r\n   * Custom install command\r\n   */\r\n  install?: string;\r\n  /**\r\n   * Available installation variables\r\n   */\r\n  installVariables?: string[];\r\n  /**\r\n   * Supported platforms\r\n   */\r\n  platforms?: string[];\r\n\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface CordovaOptions {\r\n  destruct?: boolean;\r\n  /**\r\n   * Set to true if the wrapped method is a sync function\r\n   */\r\n  sync?: boolean;\r\n  /**\r\n   * Callback order. Set to reverse if the success/error callbacks are the first 2 arguments that the wrapped method takes.\r\n   */\r\n  callbackOrder?: 'reverse';\r\n  /**\r\n   * Callback style\r\n   */\r\n  callbackStyle?: 'node' | 'object';\r\n  /**\r\n   * Set a custom index for the success callback function. This doesn't work if callbackOrder or callbackStyle are set.\r\n   */\r\n  successIndex?: number;\r\n  /**\r\n   * Set a custom index for the error callback function. This doesn't work if callbackOrder or callbackStyle are set.\r\n   */\r\n  errorIndex?: number;\r\n  /**\r\n   * Success function property name. This must be set if callbackStyle is set to object.\r\n   */\r\n  successName?: string;\r\n  /**\r\n   * Error function property name. This must be set if callbackStyle is set to object.\r\n   */\r\n  errorName?: string;\r\n  /**\r\n   * Set to true to return an observable\r\n   */\r\n  observable?: boolean;\r\n  /**\r\n   * If observable is set to true, this can be set to a different function name that will cancel the observable.\r\n   */\r\n  clearFunction?: string;\r\n  /**\r\n   * This can be used if clearFunction is set. Set this to true to call the clearFunction with the same arguments used in the initial function.\r\n   */\r\n  clearWithArgs?: boolean;\r\n  /**\r\n   * Creates an observable that wraps a global event. Replaces document.addEventListener\r\n   */\r\n  eventObservable?: boolean;\r\n  /**\r\n   * Event name, this must be set if eventObservable is set to true\r\n   */\r\n  event?: string;\r\n  /**\r\n   * Element to attach the event listener to, this is optional, defaults to `window`\r\n   */\r\n  element?: any;\r\n  /**\r\n   * Set to true if the wrapped method returns a promise\r\n   */\r\n  otherPromise?: boolean;\r\n  /**\r\n   * Supported platforms\r\n   */\r\n  platforms?: string[];\r\n}\r\n\r\nexport interface CordovaCheckOptions {\r\n  sync?: boolean;\r\n  observable?: boolean;\r\n}\r\n\r\nexport interface CordovaFiniteObservableOptions extends CordovaOptions {\r\n  /**\r\n   * Function that gets a result returned from plugin's success callback, and decides whether it is last value and observable should complete.\r\n   */\r\n  resultFinalPredicate?: (result: any) => boolean;\r\n  /**\r\n   * Function that gets called after resultFinalPredicate, and removes service data that indicates end of stream from the result.\r\n   */\r\n  resultTransform?: (result: any) => any;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function InstanceCheck(opts: CordovaCheckOptions = {}) {\r\n  return (pluginObj: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): TypedPropertyDescriptor<any> => {\r\n    return {\r\n      value: function(...args: any[]): any {\r\n        if (instanceAvailability(this)) {\r\n          return descriptor.value.apply(this, args);\r\n        } else {\r\n\r\n          if (opts.sync) {\r\n            return;\r\n          } else if (opts.observable) {\r\n            return new Observable<any>(() => { });\r\n          }\r\n\r\n          return getPromise(() => { });\r\n\r\n        }\r\n      },\r\n      enumerable: true\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * Executes function only if plugin is available\r\n * @private\r\n */\r\nexport function CordovaCheck(opts: CordovaCheckOptions = {}) {\r\n  return (pluginObj: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): TypedPropertyDescriptor<any> => {\r\n    return {\r\n      value: function(...args: any[]): any {\r\n        const check = checkAvailability(pluginObj);\r\n        if (check === true) {\r\n          return descriptor.value.apply(this, args);\r\n        } else {\r\n          if (opts.sync) {\r\n            return null;\r\n          } else if (opts.observable) {\r\n            return Observable.throw(new Error(check && check.error));\r\n          }\r\n          return Promise.reject(check && check.error);\r\n        }\r\n      },\r\n      enumerable: true\r\n    };\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * @private\r\n *\r\n * Class decorator specifying Plugin metadata. Required for all plugins.\r\n *\r\n * @usage\r\n * ```typescript\r\n * @Plugin({\r\n *  pluginName: 'MyPlugin',\r\n *  plugin: 'cordova-plugin-myplugin',\r\n *  pluginRef: 'window.myplugin'\r\n *  })\r\n *  export class MyPlugin {\r\n *\r\n *    // Plugin wrappers, properties, and functions go here ...\r\n *\r\n *  }\r\n * ```\r\n */\r\nexport function Plugin(config: PluginConfig): ClassDecorator {\r\n  return function(cls: any) {\r\n\r\n    // Add these fields to the class\r\n    for (let prop in config) {\r\n      cls[prop] = config[prop];\r\n    }\r\n\r\n    cls['installed'] = function(printWarning?: boolean) {\r\n      return !!getPlugin(config.pluginRef);\r\n    };\r\n\r\n    cls['getPlugin'] = function() {\r\n      return getPlugin(config.pluginRef);\r\n    };\r\n\r\n    cls['checkInstall'] = function() {\r\n      return checkAvailability(cls) === true;\r\n    };\r\n\r\n    cls['getPluginName'] = function() {\r\n      return config.pluginName;\r\n    };\r\n\r\n    cls['getPluginRef'] = function() {\r\n      return config.pluginRef;\r\n    };\r\n\r\n    cls['getPluginInstallName'] = function() {\r\n      return config.plugin;\r\n    };\r\n\r\n    cls['getPluginRepo'] = function() {\r\n      return config.repo;\r\n    };\r\n\r\n    cls['getSupportedPlatforms'] = function() {\r\n      return config.platforms;\r\n    };\r\n\r\n    return cls;\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n *\r\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\r\n * and the required plugin are installed.\r\n */\r\nexport function Cordova(opts: CordovaOptions = {}) {\r\n  return (target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>) => {\r\n    return {\r\n      value: function(...args: any[]) {\r\n        return wrap(this, methodName, opts).apply(this, args);\r\n      },\r\n      enumerable: true\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n *\r\n * Wrap an instance method\r\n */\r\nexport function CordovaInstance(opts: CordovaOptions = {}) {\r\n  return (target: Object, methodName: string) => {\r\n    return {\r\n      value: function(...args: any[]) {\r\n        return wrapInstance(this, methodName, opts).apply(this, args);\r\n      },\r\n      enumerable: true\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * @private\r\n *\r\n *\r\n * Before calling the original method, ensure Cordova and the plugin are installed.\r\n */\r\nexport function CordovaProperty(target: any, key: string) {\r\n  Object.defineProperty(target, key, {\r\n    enumerable: true,\r\n    get: () => {\r\n      if (checkAvailability(target, key) === true) {\r\n        return getPlugin(target.constructor.getPluginRef())[key];\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n    set: (value) => {\r\n      if (checkAvailability(target, key) === true) {\r\n        getPlugin(target.constructor.getPluginRef())[key] = value;\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n * @param target\r\n * @param key\r\n * @constructor\r\n */\r\nexport function InstanceProperty(target: any, key: string) {\r\n  Object.defineProperty(target, key, {\r\n    enumerable: true,\r\n    get: function() {\r\n      return this._objectInstance[key];\r\n    },\r\n    set: function(value) {\r\n      this._objectInstance[key] = value;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @private\r\n *\r\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\r\n * and the required plugin are installed.\r\n */\r\nexport function CordovaFunctionOverride(opts: any = {}) {\r\n  return (target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>) => {\r\n    return {\r\n      value: function(...args: any[]) {\r\n        return overrideFunction(this, methodName, opts);\r\n      },\r\n      enumerable: true\r\n    };\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * @private\r\n *\r\n * Wraps method that returns an observable that can be completed. Provided opts.resultFinalPredicate dictates when the observable completes.\r\n *\r\n */\r\nexport function CordovaFiniteObservable(opts: CordovaFiniteObservableOptions = {}) {\r\n  if (opts.observable === false) {\r\n    throw new Error('CordovaFiniteObservable decorator can only be used on methods that returns observable. Please provide correct option.');\r\n  }\r\n  opts.observable = true;\r\n  return (target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>) => {\r\n    return {\r\n      value: function(...args: any[]) {\r\n        let wrappedObservable: Observable<any> = wrap(this, methodName, opts).apply(this, args);\r\n        return new Observable<any>((observer) => {\r\n          let wrappedSubscription = wrappedObservable.subscribe({\r\n            next: (x) => {\r\n              observer.next(opts.resultTransform ? opts.resultTransform(x) : x);\r\n              if (opts.resultFinalPredicate && opts.resultFinalPredicate(x)) {\r\n                observer.complete();\r\n              }\r\n            },\r\n            error: (err) => { observer.error(err); },\r\n            complete: () => { observer.complete(); }\r\n          });\r\n          return () => {\r\n            wrappedSubscription.unsubscribe();\r\n          };\r\n        });\r\n      },\r\n      enumerable: true\r\n    };\r\n  };\r\n}\r\n"]}